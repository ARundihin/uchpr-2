#include <iostream>// l1 * l2 *(l1 + l2) + l1 + l2

using namespace std; // индекс указывающий на следующий элемент при последнем элементе должен равняться -1

struct List
{
    int* next;
    char* data;
    int lenlist;
    int beg;
    int end;

};

void createList(List* L, int len, short n);
void CreateListL(List*& L1, List*& L2, List*& L, int& l1, int& l2);
void Print(List* L,bool letters[]);
void findel(List*& L1, List*& L2, int& l1, int& l2, char delel);


int main()
{
    int indinL = 0;
    int l1, l2, Llength;
    bool letters[300] = { 0 };
    bool empty1 = 0;
    bool empty2 = 0;

    List* L1 = new List;
    List* L2 = new List;
    List* L = new List;

    cout << "Enter length of L1" << endl;
    cin >> l1;
    cout << "Enter length of L2" << endl;
    cin >> l2;

    Llength = l1 + l2;
    L->next = new int[Llength];
    L->data = new char[Llength];

    L1->beg = 0;
    L1->end = l1;
    L2->beg = 0;
    L2->end = l2;
    L->beg = 0;

    createList(L1, l1, 1);
    createList(L2, l2, 2);
    CreateListL(L1, L2, L, l1, l2);
    Print(L, letters);

    delete[] L1->data;
    delete[] L1->next;
    delete[] L2->data;
    delete[] L2->next;
    delete L1;
    delete L2;
    delete[] L->data;
    delete[]L->next;
    delete L;
    


    return 0;
}

void createList(List* L, int len, short n)
{
    L->next = new int[len];
    L->data = new char[len];
    
    cout << "Enter L" << n << " and next el" << endl;
    for (int i = 0; i < len; i++)
    {
        cin >> L->data[i];
        cin >> L->next[i];
    }
}

void CreateListL(List* &L1, List* &L2, List* &L,int &l1,int &l2)
{
    int behcur = 0;

    for (int i = L1->beg; i != -1;)
    {
        for (int j = L2->beg; j != -1;)
        {
            if (L1->data[i] == L2->data[j])
            {
                findel(L1, L2, l1, l2, L1->data[i]);
                i = L1->beg;
                j = L2->beg;

                if (l1 == 0 || l2 == 0)
                {
                    i = -1;
                    break;
                }
            }
            else
            {
                j = L2->next[j];
            }
        }

        if (i != -1)
        {
            i = L1->next[i];
        }
    }

    int l = 0;

    if (l1 != 0)
    {
        for (int i = L1->beg ; i != -1 ;)
        {
            L->data[l] = L1->data[i];
            l++;
            L->next[l - 1] = l;
            i = L1->next[i];
        }
    }

    if (l2 != 0)
    {
        for (int i = L2->beg; i != -1;)
        {
            L->data[l] = L2->data[i];
            l++;
            L->next[l - 1] = l;
            behcur = i;
            i = L2->next[i];
        }
    }

    L->data[l] = L2->data[behcur];
    L->next[l] = -1;

}

void findel(List*& L1, List*& L2, int& l1, int& l2, char delel)
{
    int behcur = L1->beg;
    for (int i = L1->beg; i != -1; )
    {
        if (L1->data[i] == delel)
        {
            if (i == L1->beg)
            {
                L1->beg++;
                l1--;
            }
            else if (L1->next[i] != -1)
            {
                L1->end--;
                l1--;
            }
            else
            {
                L1->next[behcur] = L1->next[i];
                l1--;
            }
        }

        behcur = i;
        i = L1->next[i];
    }

    behcur = L2->beg;
    for (int i = L2->beg; i != -1; )
    {
        if (L2->data[i] == delel)
        {
            if (i == L2->beg)
            {
                L2->beg++;
                l2--;
            }
            else if (L2->next[i] != -1)
            {
                L2->end--;
                l2--;
            }
            else
            {
                L2->next[behcur] = L2->next[i];
                l2--;
            }
        }

        behcur = i;
        i = L2->next[i];
    }
}

void Print(List* L,bool letters[])
{
    for (int i = 0; L->next[i] != -1; )
    {
        if (letters[int(L->data[i])] == 0 )
        {
            letters[int(L->data[i])]++;
            cout << L->data[i] << " ";
        }
        
        i = L->next[i];
    }

}

